// Generated by CoffeeScript 1.3.3

define(["jquery", "underscore", "backbone", "syphon", "mediator", "models/link", "models/tag", "collections/links", "text!templates/add/add_links.hbs", "ui"], function($, _, Backbone, Syphon, mediator, LinkModel, TagModel, LinksCollection, addLinksTemplate, ui) {
  var AddLinksView, linksCollection;
  linksCollection = new LinksCollection();
  AddLinksView = Backbone.View.extend({
    events: {
      "submit form": "updateLinks"
    },
    initialize: function() {
      console.debug('AddLinksView:initialize');
      this.collection.fetch({
        success: this.renderLinksCollectionOnFetch
      });
      return this.collection.bind('add', this.renderLinksCollection);
    },
    exampleBind: function(model) {},
    render: function() {
      var compiledTemplate, data;
      data = {
        collections: this.collection.models,
        _: _
      };
      compiledTemplate = _.template(addLinksTemplate, data);
      $("#add_links").html(compiledTemplate);
      return $("[title]").tooltip();
    },
    updateLinks: function(e) {
      var data;
      e.preventDefault();
      data = Syphon.serialize(this);
      return this.updateCollections(data);
    },
    updateCollections: function(data) {
      var link;
      link = this.updateModels(data);
      if (link) {
        this.collection.add(link);
        return link.save();
      }
    },
    updateModels: function(data) {
      var link, tag_list, valid_link;
      tag_list = data.tags.replace(/^\s+|\s+$/g, "").split(",");
      link = new LinkModel({
        name: data.name,
        url: data.url,
        tags: tag_list
      });
      mediator.trigger('add:tags_collection', tag_list);
      valid_link = link.isValid();
      if (valid_link) {
        return link;
      } else {
        return this.showError(link, "This is not a correct url!");
      }
    },
    renderLinksCollection: function(collection) {
      return mediator.trigger('add:links_collection', collection);
    },
    renderLinksCollectionOnFetch: function(model, response) {
      return mediator.trigger('fetch:links_collection', response);
    },
    showError: function(model, error) {
      return console.debug("AddLinksView:showError -> " + error);
    }
  });
  return new AddLinksView({
    el: $("#add_links"),
    collection: linksCollection
  });
});
